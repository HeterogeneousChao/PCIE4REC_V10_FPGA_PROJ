// Copyright (C) 1991-2014 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/10/2018 23:17:14"
                                                                                
// Verilog Test Bench template for design : MODULE_FIR_MHBF_ASYM
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module MODULE_MMHBF_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg CLK;
reg [23:0] Data_Config;
reg signed [23:0] rData_In;
reg signed [23:0] Data_In;
reg Data_In_Valid;
reg [3:0] Data_In_ChIdx;
reg isConfig;
reg nRST;
// wires                                               
wire signed [23:0]  Data_Out;
wire Data_Out_Valid;
wire [3:0] Data_Out_ChIdx;
wire isConfigACK;
wire isConfigDone;

reg isConfigDone_reg;

// assign statements (if any)                          
MODULE_MMBF i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.Data_Config(Data_Config),
	.Data_In(Data_In),
	.Data_In_Valid(Data_In_Valid),
	.Data_In_ChIdx(Data_In_ChIdx),
	.Data_Out(Data_Out),
	.Data_Out_Valid(Data_Out_Valid),
	.Data_Out_ChIdx(Data_Out_ChIdx),
	.isConfig(isConfig),
	.isConfigACK(isConfigACK),
	.isConfigDone(isConfigDone),
	.nRST(nRST)
);

parameter  clk_period      		= 10;                        		// clk frequency: 5MHz;
parameter  clk_half_period 	 	= clk_period / 2;  
parameter  clk_period_1M 		= clk_period * 5;     
parameter  clk_half_period_1M   = clk_half_period * 5;
parameter  data_num   	   		= 10000;                      		// simulate data length;
parameter  time_sim 	   		= data_num * clk_half_period * 20; 	// simulate time;
parameter  clk_period_data_in_valid_low = clk_period * 22;
parameter  initial_config_time  = 3000;
////////////////////////////////////////////////////////////////////
/// 
parameter FILTER_MAX_ORDER  =  32;

reg signed [23:0] coef1[(FILTER_MAX_ORDER+2)*5:0];


initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
  //MHBF_CTL = {{(NMHBF_MAX-1){1'b0}}, 1'b1};
	//MHBF_CTL_idx = 4'd0;
	isConfig = 1'b0;
    CLK  = 1;
	nRST = 0;
	Data_In = 24'd0;
	rData_In = 24'd0;
	Data_In_ChIdx = 4'd0;
	
	#500 nRST = 1;
	#time_sim  $finish;
	rData_In = 24'd0;
	Data_In = 24'd0;                                                
// --> end                                             
$display("Running testbench");                       
end             

//// generate clk
always 
begin
	#clk_half_period CLK = ~CLK;
end


reg isConfig_reg;
reg [7:0]state_idx_reg;
reg [8:0] idx_config;

initial 
begin
	idx_config <= 9'd0;
	state_idx_reg <= 8'd0;
	isConfig_reg <= 1'b0;
	#600 	isConfig_reg <= 1'b1;
	//#80000  isConfig_reg <= 1'b1;
end

///// CONFIG FILE
initial 
	begin
		$readmemb("hfcoefdata_bin.txt", coef1);
	end


reg isSecondConfig;
reg [7:0]state_idx_reg2;
reg [7:0]idx_config_cnt_reg;


always @(posedge CLK)
begin
	case (state_idx_reg)
		8'd0:
			begin
				if (isConfig_reg)
					begin
						state_idx_reg <= state_idx_reg + 8'd1;
						isConfig_reg <= 1'b0;
					end
			end
		8'd1:
			begin
				isConfig <= 1'b1;
				state_idx_reg <= state_idx_reg + 8'd1;
			end
		8'd2:
			if (idx_config == 171)
				begin
					idx_config <= 9'd0;
					state_idx_reg <= state_idx_reg + 8'd1;
				end
			else
				begin
					isConfig <= 1'b0;
					Data_Config <= coef1[idx_config];
					idx_config <= idx_config + 1;
				end
		8'd3:
			begin	
				state_idx_reg <= state_idx_reg + 8'd1;
			end
		8'd4:
			begin
				// NULL
			end
		default:
			begin
				// NULL
			end
	endcase
end



//// read test data from file;
integer Pattern;
reg [23:0] stimulus[1:data_num];

initial 
begin
	// file must be putted in dirï¼š $proc\simulation\modelsim\
	
	$readmemb("S_bin.txt", stimulus);
	Pattern = 0;
	
	# initial_config_time;
	repeat(data_num)
		begin
			Pattern = Pattern + 1;
			Data_In = stimulus[Pattern];
			Data_In_Valid <= 1;
			#clk_period;
			Data_In_Valid <= 0;
			#clk_period_data_in_valid_low;
		end
end



//// write output d_out to file: simDataOut.txt;
integer file_out;

initial 
begin
	//the file in the dir: proc\simulation\modelsim\
	
	file_out = $fopen("simDataOut.txt");
	if(!file_out)
	begin
		$display("could not open ouput file!");
		$finish;
	end
end	


always @(posedge Data_Out_Valid)
		$fdisplay(file_out, "%8d", Data_Out);
                                
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

